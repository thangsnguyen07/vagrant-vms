# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.
  
    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://vagrantcloud.com/search.
    config.vm.box = "bento/ubuntu-22.04"
    config.vm.box_version = "202407.23.0"
  
    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # NOTE: This will enable public access to the opened port
    config.vm.network "forwarded_port", guest: 80, host: 80
  
    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine and only allow access
    # via 127.0.0.1 to disable public access
    # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    config.vm.network "private_network", ip: "192.168.33.12"
  
    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    config.vm.network "public_network"
  
    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"
  
    # Disable the default share of the current code directory. Doing this
    # provides improved isolation between the vagrant box and your host
    # by making sure your Vagrantfile isn't accessible to the vagrant box.
    # If you use this you may want to enable additional shared subfolders as
    # shown above.
    # config.vm.synced_folder ".", "/vagrant", disabled: true
  
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
      vb.cpus = 2
      vb.memory = 4096
    end
    #
    # View the documentation for the provider you are using for more
    # information on available options.
  
    # Enable provisioning with a shell script. Additional provisioners such as
    # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
    # documentation for more information about their specific syntax and use.
    config.vm.provision "shell", inline: <<-SHELL
        cp /etc/sysctl.conf /root/sysctl.conf_backup
        cat > /etc/sysctl.conf <<EOT
        vm.max_map_count=262144
        fs.file-max=65536
        ulimit -n 65536
        ulimit -u 4096
EOT

        cp /etc/security/limits.conf /root/sec_limit.conf_backup
        cat > /etc/security/limits.conf <<EOT
        sonarqube   -   nofile   65536
        sonarqube   -   nproc    409
EOT

        sudo apt-get update -y
        sudo apt-get install openjdk-17-jdk -y
        sudo update-alternatives --config java

        java -version

        sudo apt update
        wget -q https://www.postgresql.org/media/keys/ACCC4CF8.asc -O - | sudo apt-key add -

        sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'
        sudo apt install postgresql postgresql-contrib -y
        #sudo -u postgres psql -c "SELECT version();"
        sudo systemctl enable postgresql.service
        sudo systemctl start  postgresql.service
        sudo echo "postgres:admin123" | chpasswd
        runuser -l postgres -c "createuser sonar"
        sudo -i -u postgres psql -c "ALTER USER sonar WITH ENCRYPTED PASSWORD 'admin123';"
        sudo -i -u postgres psql -c "CREATE DATABASE sonarqube OWNER sonar;"
        sudo -i -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE sonarqube to sonar;"
        systemctl restart  postgresql
        #systemctl status -l   postgresql
        netstat -tulpena | grep postgres
        sudo mkdir -p /sonarqube/
        cd /sonarqube/
        #sudo curl -O https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.3.0.34182.zip
        sudo curl -O https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.9.7.96285.zip
        sudo apt-get install zip -y
        sudo unzip -o sonarqube-9.9.7.96285.zip -d /opt/
        sudo mv /opt/sonarqube-9.9.7.96285/ /opt/sonarqube
        sudo groupadd sonar
        sudo useradd -c "SonarQube - User" -d /opt/sonarqube/ -g sonar sonar
        sudo chown sonar:sonar /opt/sonarqube/ -R
        cp /opt/sonarqube/conf/sonar.properties /root/sonar.properties_backup
        cat > /opt/sonarqube/conf/sonar.properties <<EOT
        sonar.jdbc.username=sonar
        sonar.jdbc.password=admin123
        sonar.jdbc.url=jdbc:postgresql://localhost/sonarqube
        sonar.web.host=0.0.0.0
        sonar.web.port=9000
        sonar.web.javaAdditionalOpts=-server
        sonar.search.javaOpts=-Xmx512m -Xms512m -XX:+HeapDumpOnOutOfMemoryError
        sonar.log.level=INFO
        sonar.path.logs=logs
EOT

        cat > /etc/systemd/system/sonarqube.service <<EOT
        [Unit]
        Description=SonarQube service
        After=syslog.target network.target

        [Service]
        Type=forking

        ExecStart=/opt/sonarqube/bin/linux-x86-64/sonar.sh start
        ExecStop=/opt/sonarqube/bin/linux-x86-64/sonar.sh stop

        User=sonar
        Group=sonar
        Restart=always

        LimitNOFILE=65536
        LimitNPROC=4096


        [Install]
        WantedBy=multi-user.target
EOT

        systemctl daemon-reload
        systemctl enable sonarqube.service
        #systemctl start sonarqube.service
        #systemctl status -l sonarqube.service
        apt-get install nginx -y
        rm -rf /etc/nginx/sites-enabled/default
        rm -rf /etc/nginx/sites-available/default
        cat > /etc/nginx/sites-available/sonarqube <<EOT
        server{
            listen      80;
            server_name sonarqube.groophy.in;

            access_log  /var/log/nginx/sonar.access.log;
            error_log   /var/log/nginx/sonar.error.log;

            proxy_buffers 16 64k;
            proxy_buffer_size 128k;

            location / {
                proxy_pass  http://127.0.0.1:9000;
                proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
                proxy_redirect off;

                proxy_set_header    Host            \$host;
                proxy_set_header    X-Real-IP       \$remote_addr;
                proxy_set_header    X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header    X-Forwarded-Proto http;
            }
        }
EOT
        ln -s /etc/nginx/sites-available/sonarqube /etc/nginx/sites-enabled/sonarqube
        systemctl enable nginx.service
        #systemctl restart nginx.service
        sudo ufw allow 80,9000,9001/tcp

        echo "System reboot in 30 sec"
        sleep 30
        reboot
    SHELL
  end
  